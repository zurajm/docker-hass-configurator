#!/bin/bash

# Download manifest-tool
curl -Lo manifest-tool https://github.com/estesp/manifest-tool/releases/download/v1.0.0/manifest-tool-linux-amd64
chmod +x manifest-tool

# Tag as latest
TAG_VER=$(echo "${DOCKER_TAG}" |  rev | cut -d- -f2- | rev )
if [[ ! $TAG_VER =~ (-beta|-test) ]]; then
    echo "Tagging version ${TAG_VER} as latest..."
    TAG_LATEST=$(echo "${DOCKER_TAG}" | sed s/${TAG_VER}/latest/g)
    docker tag $IMAGE_NAME $DOCKER_REPO:$TAG_LATEST
    docker push $DOCKER_REPO:$TAG_LATEST
    
    # Write "latest" manifest
    ./manifest-tool push from-args --ignore-missing \
    --platforms linux/amd64,linux/arm,linux/arm64 \
    --template $DOCKER_REPO:latest-ARCH \
    --target $DOCKER_REPO:latest
else
    echo "Test version detected (${TAG_VER}), not tagging it as latest..."
fi

# Write manifest
./manifest-tool push from-args --ignore-missing \
--platforms linux/amd64,linux/arm,linux/arm64 \
--template $DOCKER_REPO:${TAG_VER}-ARCH \
--target $DOCKER_REPO:${TAG_VER}

# # Use docker cli v18.09.6 to use experimental manifest feature
# curl -SL "https://download.docker.com/linux/static/stable/x86_64/docker-18.09.6.tgz" | tar xzv docker/docker --transform='s/.*/docker-cli/'
# mkdir ~/.docker
# # Add auths and experimental to docker-cli config
# echo '{"auths": '$DOCKERCFG',"experimental":"enabled"}' > ~/.docker/config.json
# # Check if all arch images are in dockerhub
# VIRTUAL_IMAGE=$(echo "${IMAGE_NAME}" | rev | cut -d- -f2- | rev )

# AMD64_IMAGE="$VIRTUAL_IMAGE-amd64"
# ARM64_IMAGE="$VIRTUAL_IMAGE-arm64v8"
# ARM32_IMAGE="$VIRTUAL_IMAGE-arm32v6"

# echo "checking if ${AMD64_IMAGE} Manifest exists"
# if ! ./docker-cli manifest inspect ${AMD64_IMAGE}; then AMD64_IMAGE='' ; fi
# echo "checking if ${ARM32_IMAGE} Manifest exists"
# if ! ./docker-cli manifest inspect ${ARM32_IMAGE}; then ARM32_IMAGE='' ; fi
# echo "checking if ${ARM64_IMAGE} Manifest exists"
# if ! ./docker-cli manifest inspect ${ARM64_IMAGE}; then ARM64_IMAGE='' ; fi

# echo "Creating multiarch manifest"
# ./docker-cli manifest create $VIRTUAL_IMAGE $AMD64_IMAGE $ARM32_IMAGE $ARM64_IMAGE
# if [ -n "${ARM32_IMAGE}" ]; then
#   ./docker-cli manifest annotate $VIRTUAL_IMAGE $ARM32_IMAGE --os linux --arch arm
# fi
# if [ -n "${ARM64_IMAGE}" ]; then
# ./docker-cli manifest annotate $VIRTUAL_IMAGE $ARM64_IMAGE --os linux --arch arm64
# fi
# ./docker-cli manifest push $VIRTUAL_IMAGE

# rm -r docker-cli ~/.docker
